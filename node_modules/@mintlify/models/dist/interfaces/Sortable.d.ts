export declare enum SORT_DIRECTION {
    ASCENDING = 0,
    DESCENDING = 1
}
/**
 * Represents an ordered list of keys from an object and their respective index positions.
 * Can be used to provide a custom sorting order.
 *
 * @template T - The type of the object for which the sort order is defined.
 */
export type SortOrder<T> = {
    /** The key from the object to be considered in sorting. */
    key: keyof T;
    /** The position/index of the key in the sorted order. */
    index: number;
}[];
/**
 * Options to control how sorting should be performed.
 *
 * @template T - The type of the object to be sorted.
 */
export type SortOptions<T> = {
    /** The direction in which to sort. */
    direction: SORT_DIRECTION;
    /**
     * An optional order configuration that can be provided to control the
     * order of keys in the sorted object.
     */
    order?: SortOrder<T>;
};
/**
 * Describes a sortable object with sorting options and a sort method.
 *
 * @template T - The type of the object that can be sorted.
 */
export interface ISortable<T> {
    /** The sorting options for this entity. */
    options: Readonly<SortOptions<T>>;
    /**
     * Sorts the object based on the provided options.
     *
     * @param out - An optional partial object that can be used as the initial state for sorting.
     *
     * @returns A sorted object.
     */
    sort(out?: Partial<T>): T;
}
