import { zodToJsonSchema } from 'zod-to-json-schema';
import { MintValidationResults } from './mint-config/common.js';
import { flattenUnionErrorMessages } from './mint-config/flattenUnionErrorMessages.js';
import { configSchema } from './mint-config/schemas/config.js';
import { validateAnchorsWarnings } from './mint-config/validateAnchorsWarnings.js';
import { validateVersionsInNavigation } from './mint-config/validateVersionsInNavigation.js';
export function validateMintConfig(config) {
    var _a;
    const results = new MintValidationResults();
    if (config == null || config == undefined || Object.entries(config).length === 0) {
        results.errors.push('Mint Config object cannot be empty.');
        results.status = 'error';
        return results;
    }
    // Specific warnings and errors
    const validateAnchorsWarningResult = validateAnchorsWarnings(config.anchors, config.navigation);
    const validateVersionsInNavigationResult = validateVersionsInNavigation(config.navigation, (_a = config.versions) !== null && _a !== void 0 ? _a : []);
    results.errors = [...results.errors, ...validateVersionsInNavigationResult.errors];
    results.warnings = [
        ...results.warnings,
        ...validateVersionsInNavigationResult.warnings,
        ...validateAnchorsWarningResult.warnings,
    ];
    // Global check
    const validateConfigResult = configSchema.safeParse(config);
    if (validateConfigResult.success == false) {
        const errors = validateConfigResult.error.issues;
        errors.forEach((e) => {
            var _a;
            if (e.code === 'invalid_union' && ((_a = e.unionErrors) === null || _a === void 0 ? void 0 : _a.length) > 0) {
                results.errors.push(...flattenUnionErrorMessages(e.unionErrors));
            }
            else {
                let message = e.message;
                // Fallback if we forget to set a required_error
                if (message === 'Required') {
                    message = 'Missing required field: ' + e.path.join('.');
                }
                results.errors.push(message);
            }
        });
    }
    results.status = results.errors.length ? 'error' : 'success';
    return results;
}
export * from './openapi/types/endpoint.js';
export { OpenApiToEndpointConverter } from './openapi/OpenApiToEndpointConverter.js';
export { SchemaConverter } from './openapi/SchemaConverter.js';
export { generateExampleFromSchema } from './openapi/generateExampleFromSchema.js';
export const mintConfigSchema = (() => {
    var _a, _b, _c, _d, _e, _f;
    const schema = zodToJsonSchema(configSchema, 'Schema');
    (_b = (_a = schema.definitions) === null || _a === void 0 ? void 0 : _a.Schema) === null || _b === void 0 ? true : delete _b.properties.__injected;
    (_d = (_c = schema.definitions) === null || _c === void 0 ? void 0 : _c.Schema) === null || _d === void 0 ? true : delete _d.properties.colors.properties.ultraDark;
    (_f = (_e = schema.definitions) === null || _e === void 0 ? void 0 : _e.Schema) === null || _f === void 0 ? true : delete _f.properties.colors.properties.ultraLight;
    return schema;
})();
export { sort } from './sort.js';
export { Sortable } from './sortable/Sortable.js';
export { any } from './any.js';
export { isSortable } from './sortable/isSortable.js';
