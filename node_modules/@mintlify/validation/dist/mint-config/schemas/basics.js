import { z } from 'zod';
export const nameSchema = z
    .string({ required_error: 'Name is missing.' })
    .min(1, 'Name cannot be empty.')
    .trim();
export const logoSchema = z.union([
    z.string().min(3, 'Logo needs to be a path to your logo file including the file extension.'),
    z.object({
        light: z.string(),
        dark: z.string(),
        href: z.string().optional(),
    }),
], {
    invalid_type_error: 'Logo must be a string or an object with light and dark properties.',
});
export const modeToggleSchema = z.object({
    default: z
        .enum(['light', 'dark'], {
        errorMap: () => {
            return {
                message: 'modeToggleSchema.default must be one of the following: light or dark',
            };
        },
    })
        .optional(),
    isHidden: z
        .boolean({
        invalid_type_error: 'isHidden must be a boolean. Try writing true or false without the quotes.',
    })
        .optional(),
});
export const isWhiteLabeledSchema = z.boolean({
    invalid_type_error: 'isWhiteLabeled must be a boolean. Try writing true or false without the quotes.',
});
export const metadataSchema = z.record(z.string({ invalid_type_error: 'metadata keys must be strings' }), z
    .string({ invalid_type_error: 'metadata values must be strings' })
    .min(1, 'metadata values must not be empty'));
export const footerSocialsSchema = z.union([
    // TO DO: deprecate array types
    z.array(z.object({
        type: z.string(),
        url: z.string().url('footerSocials url must be a valid url'),
    })),
    z.record(z.string().trim().min(1, 'footerSocials name (the key in the object) must not be empty'), z.string().url('footerSocials url (the value in the object) must be a valid url')),
], {
    invalid_type_error: 'footerSocials must be an object where the key is the name of the social media and the value is the url to your profile. For example: { "twitter": "https://twitter.com/mintlify" }',
});
export const feedbackSchema = z.object({
    thumbsRating: z
        .boolean({
        invalid_type_error: 'thumbsRating must be a boolean. Try writing true or false without the quotes.',
    })
        .optional(),
    suggestEdit: z
        .boolean({
        invalid_type_error: 'suggestEdit must be a boolean. Try writing true or false without the quotes.',
    })
        .optional(),
    raiseIssue: z
        .boolean({
        invalid_type_error: 'raiseIssue must be a boolean. Try writing true or false without the quotes.',
    })
        .optional(),
});
export const searchSchema = z.object({
    prompt: z
        .string({
        invalid_type_error: 'search.prompt must be a string. If this field is undefined, the default prompt is `Search...`',
    })
        .optional(),
});
const redirectSchema = z.object({
    source: z.string(),
    destination: z.string(),
});
export const redirectsSchema = z
    .array(redirectSchema, {
    invalid_type_error: 'redirects must be an array of objects with source and destination properties',
})
    .refine((value) => {
    const keys = value.map((obj) => obj.source);
    return new Set(keys).size === keys.length;
}, {
    message: 'Sources in the array must be unique.',
});
export const createCtaButtonSchema = (ctaButtonName) => z.union([
    z
        .object({
        type: z.literal('link').optional(),
        name: z.string({
            required_error: 'Name must be defined when using a CTA button',
            invalid_type_error: 'Name must be a string',
        }),
        url: z
            .string({
            required_error: ctaButtonName + '.url is missing',
            invalid_type_error: ctaButtonName + '.url must be a string',
        })
            .min(1, ctaButtonName + '.url cannot be empty'),
    })
        .strict(ctaButtonName +
        ' can only contain name, url, and type properties. Set a different type if you need to set other fields.'),
    z
        .object({
        type: z.literal('github'),
        url: z
            .string({
            required_error: ctaButtonName +
                '.url is missing. Please set the url to a link to your GitHub repository.',
            invalid_type_error: ctaButtonName +
                '.url must be a string. Specifically, set the url to a link to your GitHub repository.',
        })
            .url(ctaButtonName + '.url must be a valid url pointing to your GitHub repository.'),
    })
        .strict(ctaButtonName +
        ' can only contain url and type properties when type="github". Please delete any other properties you have set.'),
], {
    invalid_type_error: ctaButtonName +
        ' must be an object. The object can have type="link" (the default) if you define a url and a name. You can also have type="github" if you define a url pointing to your GitHub repo and set the type in the object.',
});
