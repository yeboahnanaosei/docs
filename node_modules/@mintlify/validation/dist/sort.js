import { SORT_DIRECTION } from '@mintlify/models';
import { Sortable } from './sortable/Sortable.js';
export function isArray(x) {
    return Array.isArray(x);
}
/**
 * Creates a comparison function for sorting purposes based on a given direction and an optional key.
 *
 * @template T - The type of the elements.
 *
 * @param direction - Specifies the direction for sorting (either ASCENDING or DESCENDING).
 * @param key - An optional key on which to base the sorting. If not provided, the object itself will be used.
 *
 * @returns A comparator function to be used with array's `sort` method.
 */
export function comparer(direction, key) {
    return (x, y) => {
        const a = key ? x[key] : x;
        const b = key ? y[key] : y;
        return direction === SORT_DIRECTION.ASCENDING ? (a > b ? 1 : -1) : a > b ? -1 : 1;
    };
}
/**
 * Sets a value for a specific key in the ordered object or array. If the value is an object, sorts it before setting.
 *
 * @template T - The type of the main object.
 * @template X - The type of the value to be set.
 *
 * @param key - The key or index where the value should be set.
 * @param value - The value to be set.
 * @param ordered - The target object or array where the value will be set.
 * @param direction - Optional sorting direction for the value if it's an object.
 */
export function set(key, value, ordered, direction) {
    if (value && typeof value === 'object') {
        ordered[key] = sort(value, {
            direction: direction !== null && direction !== void 0 ? direction : SORT_DIRECTION.ASCENDING,
        });
    }
    else {
        ordered[key] = value;
    }
}
/**
 * Returns a setter function that can be used to set values in an ordered object based on keys and sorting options.
 *
 * @template T - The type of the main object.
 *
 * @param obj - The source object with values to be set.
 * @param ordered - The target object where values will be set in an ordered manner.
 *
 * @returns A setter function for specific keys of the source object.
 */
export function getSetter(obj, ordered) {
    return (key) => {
        const value = obj[key];
        set(key, value, ordered, obj.direction);
    };
}
/**
 * Sorts an object based on the provided sorting options.
 *
 * @template T - The type of the object.
 *
 * @param obj - The object to be sorted.
 * @param options - Sorting options including direction and other parameters.
 *
 * @returns A new object with sorted entries.
 */
export function sort(obj, options = { direction: SORT_DIRECTION.ASCENDING }) {
    return new Sortable(obj, options).sort();
}
